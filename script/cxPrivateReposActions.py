#!/usr/bin/env python

#####################################################
# Unix jenkins script
# Author: Christian Askeland, SINTEF Medical Technology
# Date:   2013.09.09
#
# Description:
#
#
#####################################################

import logging
import time    
import subprocess
import sys
import argparse        
import ConfigParser

import cxsetup.cxFindCustusX

from cx.utils.cxShell import *
from cx.utils.cxPrintFormatter import PrintFormatter
import cx.build.cxComponents
import cxsetup.cxPrivateComponents
import cxsetup.cxPrivateComponentAssembly
import cx.build.cxCustusXBuilder
import cx.script.cxBuildScript

            
class Git:
    '''
    '''
    def pull(self, repo_path):
        PrintFormatter.printHeader('Update to latest git', level=3)
        shell.changeDir(repo_path)
        shell.run('git checkout release')
        shell.run('git pull origin release')
        
    def commitFile(self, repo_path, version, filename):
        shell.changeDir(repo_path)
        shell.run('git checkout release')
        shell.run('git pull origin release')
        shell.run('git add %s' % filename)
        message = '[script] Updating version file %s to %s' % (filename, version)
        shell.run('git commit -m "%s"' % message)
        shell.run('git push origin release')

    def sendTagToRepos(self, tag, repo_paths):
        for repo in repo_paths:
            self.sendTagToRepo(tag, repo)

    def sendTagToRepo(self, tag, repo_path):
        message = 'CustusX release %s. Generated by script' % tag        
        PrintFormatter.printHeader('Commit tag %s to git repo %s' % (tag, repo_path), level=3)
        shell.changeDir(repo_path)
        shell.run('git checkout release', ignoreFailure=True)
        shell.run('git pull origin release', ignoreFailure=True)
        shell.run('git tag -a %s -m "%s" -f' % (tag, message))
        shell.run('git push origin --tags -f')


class Controller(cx.script.cxBuildScript.BuildScript):
    '''
    '''
    def getDescription(self):                  
        return ''
        
    def __init__(self):
        ''
        assembly = cxsetup.cxPrivateComponentAssembly.LibraryAssembly()
        self.cxBuilder = cx.build.cxCustusXBuilder.CustusXBuilder(assembly)
        super(Controller, self).__init__(assembly)

    def addArgParsers(self):
        self.controlData().setBuildType("Release")
        shell.setRedirectOutput(False)
        
        super(Controller, self).addArgParsers()
        self.additionalParsers.append(self.getArgParser())
       
    def applyArgumentParsers(self, arguments):
        arguments = super(Controller, self).applyArgumentParsers(arguments)
        (self.options, arguments) = self.getArgParser().parse_known_args(arguments)
        print 'Options: ', self.options
        return arguments

    def getArgParser(self):
        p = argparse.ArgumentParser(add_help=False)
        p.add_argument('-s', '--run_string', default="git describe --tags", help='run a git command on all repos')
        return p
                  
    def run(self):
        '''
        The relevant commands:
        -----------------------------------------------------------------------
        Create a branch, also on remote:
        git checkout -b <branch>                   # git checkout -b release
        git push <remote> <branch>                 # git push origin release
        -----------------------------------------------------------------------
        Delete a branch, also on remote:
        git push <remote> :<branch>                # git push origin :release
        git branch -d <branch>                     # git branch -d release
        -----------------------------------------------------------------------
        Tag a commit
        git tag -a <tag> -m <msg>                  # git tag -a v1.0.0 -m "created a release"
        git push <remote> --tags                   # git push origin --tags
        -----------------------------------------------------------------------
        Download a remote branch and checkout
        git fetch <remote>                         # git fetch origin
        git checkout -b <branch> <remote>/<branch> # git checkout -b release origin/release 
        (mulig det er like greit med git checkout <branch>)
        -----------------------------------------------------------------------
        Download a remote branch and checkout
        git fetch <remote>                         # git fetch origin
        git checkout <tag>                         # git checkout -b release origin/release
        -----------------------------------------------------------------------

        
        
        
        '''
        PrintFormatter.printHeader('Run git command %s' % self.options.run_string, level=1)

        repos = self._getAllRepositories()
        for repo_path in repos:
            PrintFormatter.printHeader('Run git command in repo [%s]' % repo_path, level=3)
            shell.changeDir(repo_path)
            shell.run(self.options.run_string, ignoreFailure=True)

        #self.writeTagToAll('v3.7.2')
        #Git().pull(self._getSourcePath())

        self.cxBuilder.finish()
        
    def _getSourcePath(self):
        return self._getComponentSourcePath(cx.build.cxComponents.CustusX)
        
    def _getAllRepositories(self):
        retval = []
        retval.append(self._getComponentSourcePath(cx.build.cxComponents.CustusX))
        retval.append(self._getComponentSourcePath(cx.build.cxComponents.CustusXData))
        retval.append(self._getComponentSourcePath(cxsetup.cxPrivateComponents.CustusXSetup))
        retval.append(self._getComponentSourcePath(cxsetup.cxPrivateComponents.CustusXLargeData))
        retval.append(self._getComponentSourcePath(cxsetup.cxPrivateComponents.org_custusx_ussimulator))
        retval.append(self._getComponentSourcePath(cxsetup.cxPrivateComponents.org_custusx_gestreamer))
        retval.append(self._getComponentSourcePath(cxsetup.cxPrivateComponents.org_custusx_registration_method_modelToUS))
        retval.append(self._getComponentSourcePath(cxsetup.cxPrivateComponents.org_custusx_bronchoscopynavigation))
        retval.append(self._getComponentSourcePath(cxsetup.cxPrivateComponents.org_custusx_angleCorrection))
        return retval

    def _getComponentSourcePath(self, component):
        assembly = self.cxBuilder.assembly                
        return assembly.getComponent(component).sourcePath()

    
if __name__ == '__main__':
    controller = Controller()
    controller.run()
